@isTest
public class P0BTest {
    @isTest
    public static void nFibonnaciTest() {
    	/*
 		 * 1. Return the nth Fibonacci number
 		 * Test Cases:
		 * Input: 0     Output: 0
 		 * Input: 1    Output: 1
 		 * Input: 2     Output: 1
 		 * Input: 10    Output: 55
		 */
        system.assertEquals(0, P0B.nFibonacci(0));
        system.assertEquals(1, P0B.nFibonacci(1));
        system.assertEquals(1, P0B.nFibonacci(2));
        system.assertEquals(55, P0B.nFibonacci(10));
    }
    @isTest
    public static void sortArrayTest() {
        /*
         * Test Cases:
 		 * Input: [2,4,5,1,3,1]     Output: [1,1,2,3,4,5]
 		 * Input: [5,4,3,2,1]     Output: [1,2,3,4,5]
		 */
        system.assertEquals(new List<Integer>{1,1,2,3,4,5}, P0B.sortArray(new List<Integer>{2,4,5,1,3,1}));
        system.assertEquals(new List<Integer>{1,2,3,4,5}, P0B.sortArray(new List<Integer>{5,4,3,2,1}));
    }
    @isTest
    public static void nFactorialTest() {
        /*
         * Test Cases:
 		 * Input: 0    Output: 1
		 * Input: 1    Output: 1
 		 * Input: 3    Output: 6
		 */
        system.assertEquals(1, P0B.nFactorial(0));
        system.assertEquals(1, P0B.nFactorial(1));
        system.assertEquals(6, P0B.nFactorial(3));
    }
    @isTest
    public static void rotateLeftNTimesTest() {
        /*
         * Test Cases:
		 * Input: [1,2,3,4,5], 1    Output: [2,3,4,5,1]
		 * Input: [1,2,3,4,5], 6    Output: [2,3,4,5,1]
		 * Input: [1,2,3,4,5], 3    Output: [4,5,1,2,3]
		 */
        system.assertEquals(new List<Integer>{2,3,4,5,1}, P0B.rotateLeftNTimes(new List<Integer>{1,2,3,4,5}, 1));
        system.assertEquals(new List<Integer>{2,3,4,5,1}, P0B.rotateLeftNTimes(new List<Integer>{1,2,3,4,5}, 6));
        system.assertEquals(new List<Integer>{4,5,1,2,3}, P0B.rotateLeftNTimes(new List<Integer>{1,2,3,4,5}, 3));
    }
    @isTest
    public static void bracketsAreBalancedTest() {
        /*
 		 * The following are balanced brackets:
 		 *    ( )
 		 *    ( ) ( )
 		 *    ( ( ) )
 		 *    ( { [ ] } )
 	 	 *
 		 * The following are NOT balanced brackets:
 		 *   (
 		 *   )
 		 *   ( ( )
 		 *   ( [ ) ]
 		 */
        system.assert(P0B.bracketsAreBalanced('( )'));
        system.assert(P0B.bracketsAreBalanced('( ) ( )'));
        system.assert(P0B.bracketsAreBalanced('( ( ) )'));
        system.assert(P0B.bracketsAreBalanced('( { [ ] } )'));
        
        system.assert(!P0B.bracketsAreBalanced('('));
        system.assert(!P0B.bracketsAreBalanced(')'));
        system.assert(!P0B.bracketsAreBalanced('( ( )'));
        system.assert(!P0B.bracketsAreBalanced('( [ ) ]'));
    }
}
